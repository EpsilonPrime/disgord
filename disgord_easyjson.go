// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package disgord

import (
	json "encoding/json"

	snowflake "github.com/andersfylling/snowflake/v3"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonAa864532DecodeGithubComAndersfyllingDisgord(in *jlexer.Lexer, out *VoiceState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "guild_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.GuildID).UnmarshalJSON(data))
			}
		case "channel_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ChannelID).UnmarshalJSON(data))
			}
		case "user_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UserID).UnmarshalJSON(data))
			}
		case "member":
			if in.IsNull() {
				in.Skip()
				out.Member = nil
			} else {
				if out.Member == nil {
					out.Member = new(Member)
				}
				(*out.Member).UnmarshalEasyJSON(in)
			}
		case "session_id":
			out.SessionID = string(in.String())
		case "deaf":
			out.Deaf = bool(in.Bool())
		case "mute":
			out.Mute = bool(in.Bool())
		case "self_deaf":
			out.SelfDeaf = bool(in.Bool())
		case "self_mute":
			out.SelfMute = bool(in.Bool())
		case "suppress":
			out.Suppress = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa864532EncodeGithubComAndersfyllingDisgord(out *jwriter.Writer, in VoiceState) {
	out.RawByte('{')
	first := true
	_ = first
	if in.GuildID != 0 {
		const prefix string = ",\"guild_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.GuildID).MarshalJSON())
	}
	{
		const prefix string = ",\"channel_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ChannelID).MarshalJSON())
	}
	{
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.UserID).MarshalJSON())
	}
	if in.Member != nil {
		const prefix string = ",\"member\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Member).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"session_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SessionID))
	}
	{
		const prefix string = ",\"deaf\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Deaf))
	}
	{
		const prefix string = ",\"mute\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Mute))
	}
	{
		const prefix string = ",\"self_deaf\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.SelfDeaf))
	}
	{
		const prefix string = ",\"self_mute\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.SelfMute))
	}
	{
		const prefix string = ",\"suppress\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Suppress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VoiceState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAa864532EncodeGithubComAndersfyllingDisgord(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VoiceState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAa864532EncodeGithubComAndersfyllingDisgord(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VoiceState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAa864532DecodeGithubComAndersfyllingDisgord(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VoiceState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAa864532DecodeGithubComAndersfyllingDisgord(l, v)
}
func easyjsonAa864532DecodeGithubComAndersfyllingDisgord1(in *jlexer.Lexer, out *UserPresence) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.User).UnmarshalJSON(data))
				}
			}
		case "roles":
			if in.IsNull() {
				in.Skip()
				out.Roles = nil
			} else {
				in.Delim('[')
				if out.Roles == nil {
					if !in.IsDelim(']') {
						out.Roles = make([]snowflake.Snowflake, 0, 8)
					} else {
						out.Roles = []snowflake.Snowflake{}
					}
				} else {
					out.Roles = (out.Roles)[:0]
				}
				for !in.IsDelim(']') {
					var v1 snowflake.Snowflake
					if data := in.Raw(); in.Ok() {
						in.AddError((v1).UnmarshalJSON(data))
					}
					out.Roles = append(out.Roles, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "activity":
			if in.IsNull() {
				in.Skip()
				out.Game = nil
			} else {
				if out.Game == nil {
					out.Game = new(Activity)
				}
				easyjsonAa864532DecodeGithubComAndersfyllingDisgord2(in, out.Game)
			}
		case "guild_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.GuildID).UnmarshalJSON(data))
			}
		case "nick":
			out.Nick = string(in.String())
		case "status":
			out.Status = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa864532EncodeGithubComAndersfyllingDisgord1(out *jwriter.Writer, in UserPresence) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.User == nil {
			out.RawString("null")
		} else {
			easyjsonAa864532EncodeGithubComAndersfyllingDisgord2(out, *in.User)
		}
	}
	{
		const prefix string = ",\"roles\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Roles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Roles {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.Raw((v3).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"activity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Game == nil {
			out.RawString("null")
		} else {
			easyjsonAa864532EncodeGithubComAndersfyllingDisgord3(out, *in.Game)
		}
	}
	{
		const prefix string = ",\"guild_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.GuildID).MarshalJSON())
	}
	{
		const prefix string = ",\"nick\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Nick))
	}
	{
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserPresence) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAa864532EncodeGithubComAndersfyllingDisgord1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserPresence) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAa864532EncodeGithubComAndersfyllingDisgord1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserPresence) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAa864532DecodeGithubComAndersfyllingDisgord1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserPresence) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAa864532DecodeGithubComAndersfyllingDisgord1(l, v)
}
func easyjsonAa864532DecodeGithubComAndersfyllingDisgord3(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "username":
			out.Username = string(in.String())
		case "discriminator":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Discriminator).UnmarshalJSON(data))
			}
		case "email":
			out.Email = string(in.String())
		case "avatar":
			if in.IsNull() {
				in.Skip()
				out.Avatar = nil
			} else {
				if out.Avatar == nil {
					out.Avatar = new(string)
				}
				*out.Avatar = string(in.String())
			}
		case "token":
			out.Token = string(in.String())
		case "verified":
			out.Verified = bool(in.Bool())
		case "mfa_enabled":
			out.MFAEnabled = bool(in.Bool())
		case "bot":
			out.Bot = bool(in.Bool())
		case "premium_type":
			out.PremiumType = PremiumType(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa864532EncodeGithubComAndersfyllingDisgord2(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ID).MarshalJSON())
	}
	if in.Username != "" {
		const prefix string = ",\"username\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Username))
	}
	if in.Discriminator != 0 {
		const prefix string = ",\"discriminator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Discriminator).MarshalJSON())
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"avatar\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Avatar == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Avatar))
		}
	}
	if in.Token != "" {
		const prefix string = ",\"token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Token))
	}
	if in.Verified {
		const prefix string = ",\"verified\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Verified))
	}
	if in.MFAEnabled {
		const prefix string = ",\"mfa_enabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.MFAEnabled))
	}
	if in.Bot {
		const prefix string = ",\"bot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Bot))
	}
	if in.PremiumType != 0 {
		const prefix string = ",\"premium_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PremiumType))
	}
	out.RawByte('}')
}
func easyjsonAa864532DecodeGithubComAndersfyllingDisgord2(in *jlexer.Lexer, out *Activity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "type":
			out.Type = int(in.Int())
		case "url":
			if in.IsNull() {
				in.Skip()
				out.URL = nil
			} else {
				if out.URL == nil {
					out.URL = new(string)
				}
				*out.URL = string(in.String())
			}
		case "timestamps":
			if in.IsNull() {
				in.Skip()
				out.Timestamps = nil
			} else {
				if out.Timestamps == nil {
					out.Timestamps = new(ActivityTimestamp)
				}
				easyjsonAa864532DecodeGithubComAndersfyllingDisgord4(in, out.Timestamps)
			}
		case "application_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ApplicationID).UnmarshalJSON(data))
			}
		case "details":
			if in.IsNull() {
				in.Skip()
				out.Details = nil
			} else {
				if out.Details == nil {
					out.Details = new(string)
				}
				*out.Details = string(in.String())
			}
		case "state":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				if out.State == nil {
					out.State = new(string)
				}
				*out.State = string(in.String())
			}
		case "party":
			if in.IsNull() {
				in.Skip()
				out.Party = nil
			} else {
				if out.Party == nil {
					out.Party = new(ActivityParty)
				}
				easyjsonAa864532DecodeGithubComAndersfyllingDisgord5(in, out.Party)
			}
		case "assets":
			if in.IsNull() {
				in.Skip()
				out.Assets = nil
			} else {
				if out.Assets == nil {
					out.Assets = new(ActivityAssets)
				}
				easyjsonAa864532DecodeGithubComAndersfyllingDisgord6(in, out.Assets)
			}
		case "secrets":
			if in.IsNull() {
				in.Skip()
				out.Secrets = nil
			} else {
				if out.Secrets == nil {
					out.Secrets = new(ActivitySecrets)
				}
				easyjsonAa864532DecodeGithubComAndersfyllingDisgord7(in, out.Secrets)
			}
		case "instance":
			out.Instance = bool(in.Bool())
		case "flags":
			out.Flags = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa864532EncodeGithubComAndersfyllingDisgord3(out *jwriter.Writer, in Activity) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Type))
	}
	if in.URL != nil {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.URL))
	}
	if in.Timestamps != nil {
		const prefix string = ",\"timestamps\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonAa864532EncodeGithubComAndersfyllingDisgord4(out, *in.Timestamps)
	}
	if in.ApplicationID != 0 {
		const prefix string = ",\"application_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ApplicationID).MarshalJSON())
	}
	if in.Details != nil {
		const prefix string = ",\"details\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Details))
	}
	if in.State != nil {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.State))
	}
	if in.Party != nil {
		const prefix string = ",\"party\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonAa864532EncodeGithubComAndersfyllingDisgord5(out, *in.Party)
	}
	if in.Assets != nil {
		const prefix string = ",\"assets\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonAa864532EncodeGithubComAndersfyllingDisgord6(out, *in.Assets)
	}
	if in.Secrets != nil {
		const prefix string = ",\"secrets\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonAa864532EncodeGithubComAndersfyllingDisgord7(out, *in.Secrets)
	}
	if in.Instance {
		const prefix string = ",\"instance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Instance))
	}
	if in.Flags != 0 {
		const prefix string = ",\"flags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Flags))
	}
	out.RawByte('}')
}
func easyjsonAa864532DecodeGithubComAndersfyllingDisgord7(in *jlexer.Lexer, out *ActivitySecrets) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "join":
			out.Join = string(in.String())
		case "spectate":
			out.Spectate = string(in.String())
		case "match":
			out.Match = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa864532EncodeGithubComAndersfyllingDisgord7(out *jwriter.Writer, in ActivitySecrets) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Join != "" {
		const prefix string = ",\"join\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Join))
	}
	if in.Spectate != "" {
		const prefix string = ",\"spectate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Spectate))
	}
	if in.Match != "" {
		const prefix string = ",\"match\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Match))
	}
	out.RawByte('}')
}
func easyjsonAa864532DecodeGithubComAndersfyllingDisgord6(in *jlexer.Lexer, out *ActivityAssets) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "large_image":
			out.LargeImage = string(in.String())
		case "large_text":
			out.LargeText = string(in.String())
		case "small_image":
			out.SmallImage = string(in.String())
		case "small_text":
			out.SmallText = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa864532EncodeGithubComAndersfyllingDisgord6(out *jwriter.Writer, in ActivityAssets) {
	out.RawByte('{')
	first := true
	_ = first
	if in.LargeImage != "" {
		const prefix string = ",\"large_image\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LargeImage))
	}
	if in.LargeText != "" {
		const prefix string = ",\"large_text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LargeText))
	}
	if in.SmallImage != "" {
		const prefix string = ",\"small_image\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SmallImage))
	}
	if in.SmallText != "" {
		const prefix string = ",\"small_text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SmallText))
	}
	out.RawByte('}')
}
func easyjsonAa864532DecodeGithubComAndersfyllingDisgord5(in *jlexer.Lexer, out *ActivityParty) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "size":
			if in.IsNull() {
				in.Skip()
				out.Size = nil
			} else {
				in.Delim('[')
				if out.Size == nil {
					if !in.IsDelim(']') {
						out.Size = make([]int, 0, 8)
					} else {
						out.Size = []int{}
					}
				} else {
					out.Size = (out.Size)[:0]
				}
				for !in.IsDelim(']') {
					var v4 int
					v4 = int(in.Int())
					out.Size = append(out.Size, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa864532EncodeGithubComAndersfyllingDisgord5(out *jwriter.Writer, in ActivityParty) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if len(in.Size) != 0 {
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Size {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonAa864532DecodeGithubComAndersfyllingDisgord4(in *jlexer.Lexer, out *ActivityTimestamp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "start":
			out.Start = int(in.Int())
		case "end":
			out.End = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa864532EncodeGithubComAndersfyllingDisgord4(out *jwriter.Writer, in ActivityTimestamp) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Start != 0 {
		const prefix string = ",\"start\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Start))
	}
	if in.End != 0 {
		const prefix string = ",\"end\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.End))
	}
	out.RawByte('}')
}
func easyjsonAa864532DecodeGithubComAndersfyllingDisgord8(in *jlexer.Lexer, out *Role) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "name":
			out.Name = string(in.String())
		case "color":
			out.Color = uint(in.Uint())
		case "hoist":
			out.Hoist = bool(in.Bool())
		case "position":
			out.Position = uint(in.Uint())
		case "permissions":
			out.Permissions = uint64(in.Uint64())
		case "managed":
			out.Managed = bool(in.Bool())
		case "mentionable":
			out.Mentionable = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa864532EncodeGithubComAndersfyllingDisgord8(out *jwriter.Writer, in Role) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ID).MarshalJSON())
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"color\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.Color))
	}
	{
		const prefix string = ",\"hoist\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Hoist))
	}
	{
		const prefix string = ",\"position\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.Position))
	}
	{
		const prefix string = ",\"permissions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Permissions))
	}
	{
		const prefix string = ",\"managed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Managed))
	}
	{
		const prefix string = ",\"mentionable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Mentionable))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Role) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAa864532EncodeGithubComAndersfyllingDisgord8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Role) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAa864532EncodeGithubComAndersfyllingDisgord8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Role) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAa864532DecodeGithubComAndersfyllingDisgord8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Role) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAa864532DecodeGithubComAndersfyllingDisgord8(l, v)
}
func easyjsonAa864532DecodeGithubComAndersfyllingDisgord9(in *jlexer.Lexer, out *Message) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "channel_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ChannelID).UnmarshalJSON(data))
			}
		case "author":
			if in.IsNull() {
				in.Skip()
				out.Author = nil
			} else {
				if out.Author == nil {
					out.Author = new(User)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Author).UnmarshalJSON(data))
				}
			}
		case "content":
			out.Content = string(in.String())
		case "timestamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Timestamp).UnmarshalJSON(data))
			}
		case "edited_timestamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.EditedTimestamp).UnmarshalJSON(data))
			}
		case "tts":
			out.Tts = bool(in.Bool())
		case "mention_everyone":
			out.MentionEveryone = bool(in.Bool())
		case "mentions":
			if in.IsNull() {
				in.Skip()
				out.Mentions = nil
			} else {
				in.Delim('[')
				if out.Mentions == nil {
					if !in.IsDelim(']') {
						out.Mentions = make([]*User, 0, 8)
					} else {
						out.Mentions = []*User{}
					}
				} else {
					out.Mentions = (out.Mentions)[:0]
				}
				for !in.IsDelim(']') {
					var v7 *User
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(User)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v7).UnmarshalJSON(data))
						}
					}
					out.Mentions = append(out.Mentions, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "mention_roles":
			if in.IsNull() {
				in.Skip()
				out.MentionRoles = nil
			} else {
				in.Delim('[')
				if out.MentionRoles == nil {
					if !in.IsDelim(']') {
						out.MentionRoles = make([]snowflake.Snowflake, 0, 8)
					} else {
						out.MentionRoles = []snowflake.Snowflake{}
					}
				} else {
					out.MentionRoles = (out.MentionRoles)[:0]
				}
				for !in.IsDelim(']') {
					var v8 snowflake.Snowflake
					if data := in.Raw(); in.Ok() {
						in.AddError((v8).UnmarshalJSON(data))
					}
					out.MentionRoles = append(out.MentionRoles, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]*Attachment, 0, 8)
					} else {
						out.Attachments = []*Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v9 *Attachment
					if in.IsNull() {
						in.Skip()
						v9 = nil
					} else {
						if v9 == nil {
							v9 = new(Attachment)
						}
						easyjsonAa864532DecodeGithubComAndersfyllingDisgord10(in, v9)
					}
					out.Attachments = append(out.Attachments, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "embeds":
			if in.IsNull() {
				in.Skip()
				out.Embeds = nil
			} else {
				in.Delim('[')
				if out.Embeds == nil {
					if !in.IsDelim(']') {
						out.Embeds = make([]*Embed, 0, 8)
					} else {
						out.Embeds = []*Embed{}
					}
				} else {
					out.Embeds = (out.Embeds)[:0]
				}
				for !in.IsDelim(']') {
					var v10 *Embed
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						if v10 == nil {
							v10 = new(Embed)
						}
						easyjsonAa864532DecodeGithubComAndersfyllingDisgord11(in, v10)
					}
					out.Embeds = append(out.Embeds, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "reactions":
			if in.IsNull() {
				in.Skip()
				out.Reactions = nil
			} else {
				in.Delim('[')
				if out.Reactions == nil {
					if !in.IsDelim(']') {
						out.Reactions = make([]*Reaction, 0, 8)
					} else {
						out.Reactions = []*Reaction{}
					}
				} else {
					out.Reactions = (out.Reactions)[:0]
				}
				for !in.IsDelim(']') {
					var v11 *Reaction
					if in.IsNull() {
						in.Skip()
						v11 = nil
					} else {
						if v11 == nil {
							v11 = new(Reaction)
						}
						easyjsonAa864532DecodeGithubComAndersfyllingDisgord12(in, v11)
					}
					out.Reactions = append(out.Reactions, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "nonce":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Nonce).UnmarshalJSON(data))
			}
		case "pinned":
			out.Pinned = bool(in.Bool())
		case "webhook_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.WebhookID).UnmarshalJSON(data))
			}
		case "type":
			out.Type = uint(in.Uint())
		case "activity":
			easyjsonAa864532DecodeGithubComAndersfyllingDisgord13(in, &out.Activity)
		case "application":
			easyjsonAa864532DecodeGithubComAndersfyllingDisgord14(in, &out.Application)
		case "guild_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.GuildID).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa864532EncodeGithubComAndersfyllingDisgord9(out *jwriter.Writer, in Message) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ID).MarshalJSON())
	}
	{
		const prefix string = ",\"channel_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ChannelID).MarshalJSON())
	}
	{
		const prefix string = ",\"author\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Author == nil {
			out.RawString("null")
		} else {
			easyjsonAa864532EncodeGithubComAndersfyllingDisgord2(out, *in.Author)
		}
	}
	{
		const prefix string = ",\"content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Content))
	}
	{
		const prefix string = ",\"timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Timestamp).MarshalJSON())
	}
	{
		const prefix string = ",\"edited_timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.EditedTimestamp).MarshalJSON())
	}
	{
		const prefix string = ",\"tts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Tts))
	}
	{
		const prefix string = ",\"mention_everyone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.MentionEveryone))
	}
	{
		const prefix string = ",\"mentions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Mentions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.Mentions {
				if v12 > 0 {
					out.RawByte(',')
				}
				if v13 == nil {
					out.RawString("null")
				} else {
					easyjsonAa864532EncodeGithubComAndersfyllingDisgord2(out, *v13)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"mention_roles\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.MentionRoles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.MentionRoles {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.Raw((v15).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"attachments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v16, v17 := range in.Attachments {
				if v16 > 0 {
					out.RawByte(',')
				}
				if v17 == nil {
					out.RawString("null")
				} else {
					easyjsonAa864532EncodeGithubComAndersfyllingDisgord10(out, *v17)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"embeds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Embeds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v18, v19 := range in.Embeds {
				if v18 > 0 {
					out.RawByte(',')
				}
				if v19 == nil {
					out.RawString("null")
				} else {
					easyjsonAa864532EncodeGithubComAndersfyllingDisgord11(out, *v19)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"reactions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Reactions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Reactions {
				if v20 > 0 {
					out.RawByte(',')
				}
				if v21 == nil {
					out.RawString("null")
				} else {
					easyjsonAa864532EncodeGithubComAndersfyllingDisgord12(out, *v21)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Nonce != 0 {
		const prefix string = ",\"nonce\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Nonce).MarshalJSON())
	}
	{
		const prefix string = ",\"pinned\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Pinned))
	}
	{
		const prefix string = ",\"webhook_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.WebhookID).MarshalJSON())
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.Type))
	}
	{
		const prefix string = ",\"activity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonAa864532EncodeGithubComAndersfyllingDisgord13(out, in.Activity)
	}
	{
		const prefix string = ",\"application\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonAa864532EncodeGithubComAndersfyllingDisgord14(out, in.Application)
	}
	{
		const prefix string = ",\"guild_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.GuildID).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Message) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAa864532EncodeGithubComAndersfyllingDisgord9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Message) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAa864532EncodeGithubComAndersfyllingDisgord9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Message) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAa864532DecodeGithubComAndersfyllingDisgord9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Message) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAa864532DecodeGithubComAndersfyllingDisgord9(l, v)
}
func easyjsonAa864532DecodeGithubComAndersfyllingDisgord14(in *jlexer.Lexer, out *MessageApplication) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "cover_image":
			out.CoverImage = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "icon":
			out.Icon = string(in.String())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa864532EncodeGithubComAndersfyllingDisgord14(out *jwriter.Writer, in MessageApplication) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ID).MarshalJSON())
	}
	{
		const prefix string = ",\"cover_image\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CoverImage))
	}
	{
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"icon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Icon))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjsonAa864532DecodeGithubComAndersfyllingDisgord13(in *jlexer.Lexer, out *MessageActivity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = int(in.Int())
		case "party_id":
			out.PartyID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa864532EncodeGithubComAndersfyllingDisgord13(out *jwriter.Writer, in MessageActivity) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"party_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PartyID))
	}
	out.RawByte('}')
}
func easyjsonAa864532DecodeGithubComAndersfyllingDisgord12(in *jlexer.Lexer, out *Reaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			out.Count = uint(in.Uint())
		case "me":
			out.Me = bool(in.Bool())
		case "Emoji":
			if in.IsNull() {
				in.Skip()
				out.Emoji = nil
			} else {
				if out.Emoji == nil {
					out.Emoji = new(Emoji)
				}
				easyjsonAa864532DecodeGithubComAndersfyllingDisgord15(in, out.Emoji)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa864532EncodeGithubComAndersfyllingDisgord12(out *jwriter.Writer, in Reaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.Count))
	}
	{
		const prefix string = ",\"me\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Me))
	}
	{
		const prefix string = ",\"Emoji\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Emoji == nil {
			out.RawString("null")
		} else {
			easyjsonAa864532EncodeGithubComAndersfyllingDisgord15(out, *in.Emoji)
		}
	}
	out.RawByte('}')
}
func easyjsonAa864532DecodeGithubComAndersfyllingDisgord15(in *jlexer.Lexer, out *Emoji) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "name":
			out.Name = string(in.String())
		case "roles":
			if in.IsNull() {
				in.Skip()
				out.Roles = nil
			} else {
				in.Delim('[')
				if out.Roles == nil {
					if !in.IsDelim(']') {
						out.Roles = make([]snowflake.Snowflake, 0, 8)
					} else {
						out.Roles = []snowflake.Snowflake{}
					}
				} else {
					out.Roles = (out.Roles)[:0]
				}
				for !in.IsDelim(']') {
					var v22 snowflake.Snowflake
					if data := in.Raw(); in.Ok() {
						in.AddError((v22).UnmarshalJSON(data))
					}
					out.Roles = append(out.Roles, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.User).UnmarshalJSON(data))
				}
			}
		case "require_colons":
			out.RequireColons = bool(in.Bool())
		case "managed":
			out.Managed = bool(in.Bool())
		case "animated":
			out.Animated = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa864532EncodeGithubComAndersfyllingDisgord15(out *jwriter.Writer, in Emoji) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ID).MarshalJSON())
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if len(in.Roles) != 0 {
		const prefix string = ",\"roles\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v23, v24 := range in.Roles {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.Raw((v24).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	if in.User != nil {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonAa864532EncodeGithubComAndersfyllingDisgord2(out, *in.User)
	}
	if in.RequireColons {
		const prefix string = ",\"require_colons\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.RequireColons))
	}
	if in.Managed {
		const prefix string = ",\"managed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Managed))
	}
	if in.Animated {
		const prefix string = ",\"animated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Animated))
	}
	out.RawByte('}')
}
func easyjsonAa864532DecodeGithubComAndersfyllingDisgord11(in *jlexer.Lexer, out *Embed) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "timestamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Timestamp).UnmarshalJSON(data))
			}
		case "color":
			out.Color = int(in.Int())
		case "footer":
			if in.IsNull() {
				in.Skip()
				out.Footer = nil
			} else {
				if out.Footer == nil {
					out.Footer = new(EmbedFooter)
				}
				easyjsonAa864532DecodeGithubComAndersfyllingDisgord16(in, out.Footer)
			}
		case "image":
			if in.IsNull() {
				in.Skip()
				out.Image = nil
			} else {
				if out.Image == nil {
					out.Image = new(EmbedImage)
				}
				easyjsonAa864532DecodeGithubComAndersfyllingDisgord17(in, out.Image)
			}
		case "thumbnail":
			if in.IsNull() {
				in.Skip()
				out.Thumbnail = nil
			} else {
				if out.Thumbnail == nil {
					out.Thumbnail = new(EmbedThumbnail)
				}
				easyjsonAa864532DecodeGithubComAndersfyllingDisgord18(in, out.Thumbnail)
			}
		case "video":
			if in.IsNull() {
				in.Skip()
				out.Video = nil
			} else {
				if out.Video == nil {
					out.Video = new(EmbedVideo)
				}
				easyjsonAa864532DecodeGithubComAndersfyllingDisgord19(in, out.Video)
			}
		case "provider":
			if in.IsNull() {
				in.Skip()
				out.Provider = nil
			} else {
				if out.Provider == nil {
					out.Provider = new(EmbedProvider)
				}
				easyjsonAa864532DecodeGithubComAndersfyllingDisgord20(in, out.Provider)
			}
		case "author":
			if in.IsNull() {
				in.Skip()
				out.Author = nil
			} else {
				if out.Author == nil {
					out.Author = new(EmbedAuthor)
				}
				easyjsonAa864532DecodeGithubComAndersfyllingDisgord21(in, out.Author)
			}
		case "fields":
			if in.IsNull() {
				in.Skip()
				out.Fields = nil
			} else {
				in.Delim('[')
				if out.Fields == nil {
					if !in.IsDelim(']') {
						out.Fields = make([]*EmbedField, 0, 8)
					} else {
						out.Fields = []*EmbedField{}
					}
				} else {
					out.Fields = (out.Fields)[:0]
				}
				for !in.IsDelim(']') {
					var v25 *EmbedField
					if in.IsNull() {
						in.Skip()
						v25 = nil
					} else {
						if v25 == nil {
							v25 = new(EmbedField)
						}
						easyjsonAa864532DecodeGithubComAndersfyllingDisgord22(in, v25)
					}
					out.Fields = append(out.Fields, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa864532EncodeGithubComAndersfyllingDisgord11(out *jwriter.Writer, in Embed) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.URL != "" {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.URL))
	}
	if true {
		const prefix string = ",\"timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Timestamp).MarshalJSON())
	}
	{
		const prefix string = ",\"color\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Color))
	}
	if in.Footer != nil {
		const prefix string = ",\"footer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonAa864532EncodeGithubComAndersfyllingDisgord16(out, *in.Footer)
	}
	if in.Image != nil {
		const prefix string = ",\"image\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonAa864532EncodeGithubComAndersfyllingDisgord17(out, *in.Image)
	}
	if in.Thumbnail != nil {
		const prefix string = ",\"thumbnail\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonAa864532EncodeGithubComAndersfyllingDisgord18(out, *in.Thumbnail)
	}
	if in.Video != nil {
		const prefix string = ",\"video\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonAa864532EncodeGithubComAndersfyllingDisgord19(out, *in.Video)
	}
	if in.Provider != nil {
		const prefix string = ",\"provider\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonAa864532EncodeGithubComAndersfyllingDisgord20(out, *in.Provider)
	}
	if in.Author != nil {
		const prefix string = ",\"author\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonAa864532EncodeGithubComAndersfyllingDisgord21(out, *in.Author)
	}
	if len(in.Fields) != 0 {
		const prefix string = ",\"fields\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v26, v27 := range in.Fields {
				if v26 > 0 {
					out.RawByte(',')
				}
				if v27 == nil {
					out.RawString("null")
				} else {
					easyjsonAa864532EncodeGithubComAndersfyllingDisgord22(out, *v27)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonAa864532DecodeGithubComAndersfyllingDisgord22(in *jlexer.Lexer, out *EmbedField) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "value":
			out.Value = string(in.String())
		case "bool":
			out.Inline = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa864532EncodeGithubComAndersfyllingDisgord22(out *jwriter.Writer, in EmbedField) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	if in.Inline {
		const prefix string = ",\"bool\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Inline))
	}
	out.RawByte('}')
}
func easyjsonAa864532DecodeGithubComAndersfyllingDisgord21(in *jlexer.Lexer, out *EmbedAuthor) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "icon_url":
			out.IconURL = string(in.String())
		case "proxy_icon_url":
			out.ProxyIconURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa864532EncodeGithubComAndersfyllingDisgord21(out *jwriter.Writer, in EmbedAuthor) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.URL != "" {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.URL))
	}
	if in.IconURL != "" {
		const prefix string = ",\"icon_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IconURL))
	}
	if in.ProxyIconURL != "" {
		const prefix string = ",\"proxy_icon_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProxyIconURL))
	}
	out.RawByte('}')
}
func easyjsonAa864532DecodeGithubComAndersfyllingDisgord20(in *jlexer.Lexer, out *EmbedProvider) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "url":
			out.URL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa864532EncodeGithubComAndersfyllingDisgord20(out *jwriter.Writer, in EmbedProvider) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.URL != "" {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.URL))
	}
	out.RawByte('}')
}
func easyjsonAa864532DecodeGithubComAndersfyllingDisgord19(in *jlexer.Lexer, out *EmbedVideo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		case "height":
			out.Height = int(in.Int())
		case "width":
			out.Width = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa864532EncodeGithubComAndersfyllingDisgord19(out *jwriter.Writer, in EmbedVideo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.URL != "" {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.URL))
	}
	if in.Height != 0 {
		const prefix string = ",\"height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Height))
	}
	if in.Width != 0 {
		const prefix string = ",\"width\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Width))
	}
	out.RawByte('}')
}
func easyjsonAa864532DecodeGithubComAndersfyllingDisgord18(in *jlexer.Lexer, out *EmbedThumbnail) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		case "proxy_url":
			out.ProxyURL = string(in.String())
		case "height":
			out.Height = int(in.Int())
		case "width":
			out.Width = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa864532EncodeGithubComAndersfyllingDisgord18(out *jwriter.Writer, in EmbedThumbnail) {
	out.RawByte('{')
	first := true
	_ = first
	if in.URL != "" {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.URL))
	}
	if in.ProxyURL != "" {
		const prefix string = ",\"proxy_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProxyURL))
	}
	if in.Height != 0 {
		const prefix string = ",\"height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Height))
	}
	if in.Width != 0 {
		const prefix string = ",\"width\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Width))
	}
	out.RawByte('}')
}
func easyjsonAa864532DecodeGithubComAndersfyllingDisgord17(in *jlexer.Lexer, out *EmbedImage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		case "proxy_url":
			out.ProxyURL = string(in.String())
		case "height":
			out.Height = int(in.Int())
		case "width":
			out.Width = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa864532EncodeGithubComAndersfyllingDisgord17(out *jwriter.Writer, in EmbedImage) {
	out.RawByte('{')
	first := true
	_ = first
	if in.URL != "" {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.URL))
	}
	if in.ProxyURL != "" {
		const prefix string = ",\"proxy_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProxyURL))
	}
	if in.Height != 0 {
		const prefix string = ",\"height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Height))
	}
	if in.Width != 0 {
		const prefix string = ",\"width\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Width))
	}
	out.RawByte('}')
}
func easyjsonAa864532DecodeGithubComAndersfyllingDisgord16(in *jlexer.Lexer, out *EmbedFooter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "text":
			out.Text = string(in.String())
		case "icon_url":
			out.IconURL = string(in.String())
		case "proxy_icon_url":
			out.ProxyIconURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa864532EncodeGithubComAndersfyllingDisgord16(out *jwriter.Writer, in EmbedFooter) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	if in.IconURL != "" {
		const prefix string = ",\"icon_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IconURL))
	}
	if in.ProxyIconURL != "" {
		const prefix string = ",\"proxy_icon_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProxyIconURL))
	}
	out.RawByte('}')
}
func easyjsonAa864532DecodeGithubComAndersfyllingDisgord10(in *jlexer.Lexer, out *Attachment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "filename":
			out.Filename = string(in.String())
		case "size":
			out.Size = uint(in.Uint())
		case "url":
			out.URL = string(in.String())
		case "proxy_url":
			out.ProxyURL = string(in.String())
		case "height":
			out.Height = uint(in.Uint())
		case "width":
			out.Width = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa864532EncodeGithubComAndersfyllingDisgord10(out *jwriter.Writer, in Attachment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ID).MarshalJSON())
	}
	{
		const prefix string = ",\"filename\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Filename))
	}
	{
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.Size))
	}
	{
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"proxy_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProxyURL))
	}
	{
		const prefix string = ",\"height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.Height))
	}
	{
		const prefix string = ",\"width\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.Width))
	}
	out.RawByte('}')
}
func easyjsonAa864532DecodeGithubComAndersfyllingDisgord23(in *jlexer.Lexer, out *Member) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "guild_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.GuildID).UnmarshalJSON(data))
			}
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.User).UnmarshalJSON(data))
				}
			}
		case "nick":
			out.Nick = string(in.String())
		case "roles":
			if in.IsNull() {
				in.Skip()
				out.Roles = nil
			} else {
				in.Delim('[')
				if out.Roles == nil {
					if !in.IsDelim(']') {
						out.Roles = make([]snowflake.Snowflake, 0, 8)
					} else {
						out.Roles = []snowflake.Snowflake{}
					}
				} else {
					out.Roles = (out.Roles)[:0]
				}
				for !in.IsDelim(']') {
					var v28 snowflake.Snowflake
					if data := in.Raw(); in.Ok() {
						in.AddError((v28).UnmarshalJSON(data))
					}
					out.Roles = append(out.Roles, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "joined_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.JoinedAt).UnmarshalJSON(data))
			}
		case "deaf":
			out.Deaf = bool(in.Bool())
		case "mute":
			out.Mute = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa864532EncodeGithubComAndersfyllingDisgord23(out *jwriter.Writer, in Member) {
	out.RawByte('{')
	first := true
	_ = first
	if in.GuildID != 0 {
		const prefix string = ",\"guild_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.GuildID).MarshalJSON())
	}
	{
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.User == nil {
			out.RawString("null")
		} else {
			easyjsonAa864532EncodeGithubComAndersfyllingDisgord2(out, *in.User)
		}
	}
	if in.Nick != "" {
		const prefix string = ",\"nick\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Nick))
	}
	{
		const prefix string = ",\"roles\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Roles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.Roles {
				if v29 > 0 {
					out.RawByte(',')
				}
				out.Raw((v30).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"joined_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.JoinedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"deaf\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Deaf))
	}
	{
		const prefix string = ",\"mute\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Mute))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Member) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAa864532EncodeGithubComAndersfyllingDisgord23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Member) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAa864532EncodeGithubComAndersfyllingDisgord23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Member) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAa864532DecodeGithubComAndersfyllingDisgord23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Member) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAa864532DecodeGithubComAndersfyllingDisgord23(l, v)
}
func easyjsonAa864532DecodeGithubComAndersfyllingDisgord24(in *jlexer.Lexer, out *GuildUnavailable) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "unavailable":
			out.Unavailable = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa864532EncodeGithubComAndersfyllingDisgord24(out *jwriter.Writer, in GuildUnavailable) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ID).MarshalJSON())
	}
	{
		const prefix string = ",\"unavailable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Unavailable))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GuildUnavailable) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAa864532EncodeGithubComAndersfyllingDisgord24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GuildUnavailable) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAa864532EncodeGithubComAndersfyllingDisgord24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GuildUnavailable) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAa864532DecodeGithubComAndersfyllingDisgord24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GuildUnavailable) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAa864532DecodeGithubComAndersfyllingDisgord24(l, v)
}
func easyjsonAa864532DecodeGithubComAndersfyllingDisgord25(in *jlexer.Lexer, out *Guild) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "application_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ApplicationID).UnmarshalJSON(data))
			}
		case "name":
			out.Name = string(in.String())
		case "icon":
			if in.IsNull() {
				in.Skip()
				out.Icon = nil
			} else {
				if out.Icon == nil {
					out.Icon = new(string)
				}
				*out.Icon = string(in.String())
			}
		case "splash":
			if in.IsNull() {
				in.Skip()
				out.Splash = nil
			} else {
				if out.Splash == nil {
					out.Splash = new(string)
				}
				*out.Splash = string(in.String())
			}
		case "owner":
			out.Owner = bool(in.Bool())
		case "owner_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.OwnerID).UnmarshalJSON(data))
			}
		case "permissions":
			out.Permissions = uint64(in.Uint64())
		case "region":
			out.Region = string(in.String())
		case "afk_channel_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.AfkChannelID).UnmarshalJSON(data))
			}
		case "afk_timeout":
			out.AfkTimeout = uint(in.Uint())
		case "embed_enabled":
			out.EmbedEnabled = bool(in.Bool())
		case "embed_channel_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.EmbedChannelID).UnmarshalJSON(data))
			}
		case "verification_level":
			out.VerificationLevel = VerificationLvl(in.Uint())
		case "default_message_notifications":
			out.DefaultMessageNotifications = DefaultMessageNotificationLvl(in.Uint())
		case "explicit_content_filter":
			out.ExplicitContentFilter = ExplicitContentFilterLvl(in.Uint())
		case "roles":
			if in.IsNull() {
				in.Skip()
				out.Roles = nil
			} else {
				in.Delim('[')
				if out.Roles == nil {
					if !in.IsDelim(']') {
						out.Roles = make([]*Role, 0, 8)
					} else {
						out.Roles = []*Role{}
					}
				} else {
					out.Roles = (out.Roles)[:0]
				}
				for !in.IsDelim(']') {
					var v31 *Role
					if in.IsNull() {
						in.Skip()
						v31 = nil
					} else {
						if v31 == nil {
							v31 = new(Role)
						}
						(*v31).UnmarshalEasyJSON(in)
					}
					out.Roles = append(out.Roles, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "emojis":
			if in.IsNull() {
				in.Skip()
				out.Emojis = nil
			} else {
				in.Delim('[')
				if out.Emojis == nil {
					if !in.IsDelim(']') {
						out.Emojis = make([]*Emoji, 0, 8)
					} else {
						out.Emojis = []*Emoji{}
					}
				} else {
					out.Emojis = (out.Emojis)[:0]
				}
				for !in.IsDelim(']') {
					var v32 *Emoji
					if in.IsNull() {
						in.Skip()
						v32 = nil
					} else {
						if v32 == nil {
							v32 = new(Emoji)
						}
						easyjsonAa864532DecodeGithubComAndersfyllingDisgord15(in, v32)
					}
					out.Emojis = append(out.Emojis, v32)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "features":
			if in.IsNull() {
				in.Skip()
				out.Features = nil
			} else {
				in.Delim('[')
				if out.Features == nil {
					if !in.IsDelim(']') {
						out.Features = make([]string, 0, 4)
					} else {
						out.Features = []string{}
					}
				} else {
					out.Features = (out.Features)[:0]
				}
				for !in.IsDelim(']') {
					var v33 string
					v33 = string(in.String())
					out.Features = append(out.Features, v33)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "mfa_level":
			out.MFALevel = MFALvl(in.Uint())
		case "widget_enabled":
			out.WidgetEnabled = bool(in.Bool())
		case "widget_channel_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.WidgetChannelID).UnmarshalJSON(data))
			}
		case "system_channel_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.SystemChannelID).UnmarshalJSON(data))
			}
		case "joined_at":
			if in.IsNull() {
				in.Skip()
				out.JoinedAt = nil
			} else {
				if out.JoinedAt == nil {
					out.JoinedAt = new(Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.JoinedAt).UnmarshalJSON(data))
				}
			}
		case "large":
			out.Large = bool(in.Bool())
		case "unavailable":
			out.Unavailable = bool(in.Bool())
		case "member_count":
			out.MemberCount = uint(in.Uint())
		case "voice_states":
			if in.IsNull() {
				in.Skip()
				out.VoiceStates = nil
			} else {
				in.Delim('[')
				if out.VoiceStates == nil {
					if !in.IsDelim(']') {
						out.VoiceStates = make([]*VoiceState, 0, 8)
					} else {
						out.VoiceStates = []*VoiceState{}
					}
				} else {
					out.VoiceStates = (out.VoiceStates)[:0]
				}
				for !in.IsDelim(']') {
					var v34 *VoiceState
					if in.IsNull() {
						in.Skip()
						v34 = nil
					} else {
						if v34 == nil {
							v34 = new(VoiceState)
						}
						(*v34).UnmarshalEasyJSON(in)
					}
					out.VoiceStates = append(out.VoiceStates, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "members":
			if in.IsNull() {
				in.Skip()
				out.Members = nil
			} else {
				in.Delim('[')
				if out.Members == nil {
					if !in.IsDelim(']') {
						out.Members = make([]*Member, 0, 8)
					} else {
						out.Members = []*Member{}
					}
				} else {
					out.Members = (out.Members)[:0]
				}
				for !in.IsDelim(']') {
					var v35 *Member
					if in.IsNull() {
						in.Skip()
						v35 = nil
					} else {
						if v35 == nil {
							v35 = new(Member)
						}
						(*v35).UnmarshalEasyJSON(in)
					}
					out.Members = append(out.Members, v35)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "channels":
			if in.IsNull() {
				in.Skip()
				out.Channels = nil
			} else {
				in.Delim('[')
				if out.Channels == nil {
					if !in.IsDelim(']') {
						out.Channels = make([]*Channel, 0, 8)
					} else {
						out.Channels = []*Channel{}
					}
				} else {
					out.Channels = (out.Channels)[:0]
				}
				for !in.IsDelim(']') {
					var v36 *Channel
					if in.IsNull() {
						in.Skip()
						v36 = nil
					} else {
						if v36 == nil {
							v36 = new(Channel)
						}
						(*v36).UnmarshalEasyJSON(in)
					}
					out.Channels = append(out.Channels, v36)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "presences":
			if in.IsNull() {
				in.Skip()
				out.Presences = nil
			} else {
				in.Delim('[')
				if out.Presences == nil {
					if !in.IsDelim(']') {
						out.Presences = make([]*UserPresence, 0, 8)
					} else {
						out.Presences = []*UserPresence{}
					}
				} else {
					out.Presences = (out.Presences)[:0]
				}
				for !in.IsDelim(']') {
					var v37 *UserPresence
					if in.IsNull() {
						in.Skip()
						v37 = nil
					} else {
						if v37 == nil {
							v37 = new(UserPresence)
						}
						(*v37).UnmarshalEasyJSON(in)
					}
					out.Presences = append(out.Presences, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa864532EncodeGithubComAndersfyllingDisgord25(out *jwriter.Writer, in Guild) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ID).MarshalJSON())
	}
	{
		const prefix string = ",\"application_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ApplicationID).MarshalJSON())
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"icon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Icon == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Icon))
		}
	}
	{
		const prefix string = ",\"splash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Splash == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Splash))
		}
	}
	if in.Owner {
		const prefix string = ",\"owner\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Owner))
	}
	{
		const prefix string = ",\"owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.OwnerID).MarshalJSON())
	}
	if in.Permissions != 0 {
		const prefix string = ",\"permissions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.Permissions))
	}
	{
		const prefix string = ",\"region\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Region))
	}
	{
		const prefix string = ",\"afk_channel_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.AfkChannelID).MarshalJSON())
	}
	{
		const prefix string = ",\"afk_timeout\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.AfkTimeout))
	}
	{
		const prefix string = ",\"embed_enabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.EmbedEnabled))
	}
	{
		const prefix string = ",\"embed_channel_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.EmbedChannelID).MarshalJSON())
	}
	{
		const prefix string = ",\"verification_level\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.VerificationLevel))
	}
	{
		const prefix string = ",\"default_message_notifications\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.DefaultMessageNotifications))
	}
	{
		const prefix string = ",\"explicit_content_filter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.ExplicitContentFilter))
	}
	{
		const prefix string = ",\"roles\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Roles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v38, v39 := range in.Roles {
				if v38 > 0 {
					out.RawByte(',')
				}
				if v39 == nil {
					out.RawString("null")
				} else {
					(*v39).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"emojis\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Emojis == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v40, v41 := range in.Emojis {
				if v40 > 0 {
					out.RawByte(',')
				}
				if v41 == nil {
					out.RawString("null")
				} else {
					easyjsonAa864532EncodeGithubComAndersfyllingDisgord15(out, *v41)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"features\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Features == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v42, v43 := range in.Features {
				if v42 > 0 {
					out.RawByte(',')
				}
				out.String(string(v43))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"mfa_level\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.MFALevel))
	}
	{
		const prefix string = ",\"widget_enabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.WidgetEnabled))
	}
	{
		const prefix string = ",\"widget_channel_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.WidgetChannelID).MarshalJSON())
	}
	if in.SystemChannelID != 0 {
		const prefix string = ",\"system_channel_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.SystemChannelID).MarshalJSON())
	}
	if in.JoinedAt != nil {
		const prefix string = ",\"joined_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.JoinedAt).MarshalJSON())
	}
	if in.Large {
		const prefix string = ",\"large\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Large))
	}
	{
		const prefix string = ",\"unavailable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Unavailable))
	}
	if in.MemberCount != 0 {
		const prefix string = ",\"member_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.MemberCount))
	}
	if len(in.VoiceStates) != 0 {
		const prefix string = ",\"voice_states\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v44, v45 := range in.VoiceStates {
				if v44 > 0 {
					out.RawByte(',')
				}
				if v45 == nil {
					out.RawString("null")
				} else {
					(*v45).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Members) != 0 {
		const prefix string = ",\"members\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v46, v47 := range in.Members {
				if v46 > 0 {
					out.RawByte(',')
				}
				if v47 == nil {
					out.RawString("null")
				} else {
					(*v47).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Channels) != 0 {
		const prefix string = ",\"channels\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v48, v49 := range in.Channels {
				if v48 > 0 {
					out.RawByte(',')
				}
				if v49 == nil {
					out.RawString("null")
				} else {
					(*v49).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Presences) != 0 {
		const prefix string = ",\"presences\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v50, v51 := range in.Presences {
				if v50 > 0 {
					out.RawByte(',')
				}
				if v51 == nil {
					out.RawString("null")
				} else {
					(*v51).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Guild) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAa864532EncodeGithubComAndersfyllingDisgord25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Guild) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAa864532EncodeGithubComAndersfyllingDisgord25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Guild) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAa864532DecodeGithubComAndersfyllingDisgord25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Guild) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAa864532DecodeGithubComAndersfyllingDisgord25(l, v)
}
func easyjsonAa864532DecodeGithubComAndersfyllingDisgord26(in *jlexer.Lexer, out *Channel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "type":
			out.Type = uint(in.Uint())
		case "guild_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.GuildID).UnmarshalJSON(data))
			}
		case "position":
			out.Position = uint(in.Uint())
		case "permission_overwrites":
			if in.IsNull() {
				in.Skip()
				out.PermissionOverwrites = nil
			} else {
				in.Delim('[')
				if out.PermissionOverwrites == nil {
					if !in.IsDelim(']') {
						out.PermissionOverwrites = make([]PermissionOverwrite, 0, 1)
					} else {
						out.PermissionOverwrites = []PermissionOverwrite{}
					}
				} else {
					out.PermissionOverwrites = (out.PermissionOverwrites)[:0]
				}
				for !in.IsDelim(']') {
					var v52 PermissionOverwrite
					easyjsonAa864532DecodeGithubComAndersfyllingDisgord27(in, &v52)
					out.PermissionOverwrites = append(out.PermissionOverwrites, v52)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "name":
			out.Name = string(in.String())
		case "topic":
			out.Topic = string(in.String())
		case "nsfw":
			out.NSFW = bool(in.Bool())
		case "last_message_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastMessageID).UnmarshalJSON(data))
			}
		case "bitrate":
			out.Bitrate = uint(in.Uint())
		case "user_limit":
			out.UserLimit = uint(in.Uint())
		case "rate_limit_per_user":
			out.RateLimitPerUser = uint(in.Uint())
		case "recipient":
			if in.IsNull() {
				in.Skip()
				out.Recipients = nil
			} else {
				in.Delim('[')
				if out.Recipients == nil {
					if !in.IsDelim(']') {
						out.Recipients = make([]*User, 0, 8)
					} else {
						out.Recipients = []*User{}
					}
				} else {
					out.Recipients = (out.Recipients)[:0]
				}
				for !in.IsDelim(']') {
					var v53 *User
					if in.IsNull() {
						in.Skip()
						v53 = nil
					} else {
						if v53 == nil {
							v53 = new(User)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v53).UnmarshalJSON(data))
						}
					}
					out.Recipients = append(out.Recipients, v53)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "icon":
			if in.IsNull() {
				in.Skip()
				out.Icon = nil
			} else {
				if out.Icon == nil {
					out.Icon = new(string)
				}
				*out.Icon = string(in.String())
			}
		case "owner_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.OwnerID).UnmarshalJSON(data))
			}
		case "application_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ApplicationID).UnmarshalJSON(data))
			}
		case "parent_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ParentID).UnmarshalJSON(data))
			}
		case "last_pin_timestamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastPinTimestamp).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa864532EncodeGithubComAndersfyllingDisgord26(out *jwriter.Writer, in Channel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ID).MarshalJSON())
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.Type))
	}
	if in.GuildID != 0 {
		const prefix string = ",\"guild_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.GuildID).MarshalJSON())
	}
	if in.Position != 0 {
		const prefix string = ",\"position\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.Position))
	}
	if len(in.PermissionOverwrites) != 0 {
		const prefix string = ",\"permission_overwrites\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v54, v55 := range in.PermissionOverwrites {
				if v54 > 0 {
					out.RawByte(',')
				}
				easyjsonAa864532EncodeGithubComAndersfyllingDisgord27(out, v55)
			}
			out.RawByte(']')
		}
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Topic != "" {
		const prefix string = ",\"topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Topic))
	}
	if in.NSFW {
		const prefix string = ",\"nsfw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.NSFW))
	}
	if in.LastMessageID != 0 {
		const prefix string = ",\"last_message_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.LastMessageID).MarshalJSON())
	}
	if in.Bitrate != 0 {
		const prefix string = ",\"bitrate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.Bitrate))
	}
	if in.UserLimit != 0 {
		const prefix string = ",\"user_limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.UserLimit))
	}
	if in.RateLimitPerUser != 0 {
		const prefix string = ",\"rate_limit_per_user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.RateLimitPerUser))
	}
	if len(in.Recipients) != 0 {
		const prefix string = ",\"recipient\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v56, v57 := range in.Recipients {
				if v56 > 0 {
					out.RawByte(',')
				}
				if v57 == nil {
					out.RawString("null")
				} else {
					easyjsonAa864532EncodeGithubComAndersfyllingDisgord2(out, *v57)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Icon != nil {
		const prefix string = ",\"icon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Icon))
	}
	if in.OwnerID != 0 {
		const prefix string = ",\"owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.OwnerID).MarshalJSON())
	}
	if in.ApplicationID != 0 {
		const prefix string = ",\"application_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ApplicationID).MarshalJSON())
	}
	if in.ParentID != 0 {
		const prefix string = ",\"parent_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ParentID).MarshalJSON())
	}
	if true {
		const prefix string = ",\"last_pin_timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.LastPinTimestamp).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Channel) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAa864532EncodeGithubComAndersfyllingDisgord26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Channel) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAa864532EncodeGithubComAndersfyllingDisgord26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Channel) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAa864532DecodeGithubComAndersfyllingDisgord26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Channel) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAa864532DecodeGithubComAndersfyllingDisgord26(l, v)
}
func easyjsonAa864532DecodeGithubComAndersfyllingDisgord27(in *jlexer.Lexer, out *PermissionOverwrite) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "type":
			out.Type = string(in.String())
		case "allow":
			out.Allow = int(in.Int())
		case "deny":
			out.Deny = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa864532EncodeGithubComAndersfyllingDisgord27(out *jwriter.Writer, in PermissionOverwrite) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ID).MarshalJSON())
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"allow\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Allow))
	}
	{
		const prefix string = ",\"deny\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Deny))
	}
	out.RawByte('}')
}
func easyjsonAa864532DecodeGithubComAndersfyllingDisgord28(in *jlexer.Lexer, out *AuditLogOption) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "delete_member_days":
			out.DeleteMemberDays = string(in.String())
		case "members_removed":
			out.MembersRemoved = string(in.String())
		case "channel_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ChannelID).UnmarshalJSON(data))
			}
		case "count":
			out.Count = string(in.String())
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "type":
			out.Type = string(in.String())
		case "role_name":
			out.RoleName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa864532EncodeGithubComAndersfyllingDisgord28(out *jwriter.Writer, in AuditLogOption) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"delete_member_days\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DeleteMemberDays))
	}
	{
		const prefix string = ",\"members_removed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MembersRemoved))
	}
	{
		const prefix string = ",\"channel_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ChannelID).MarshalJSON())
	}
	{
		const prefix string = ",\"count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Count))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ID).MarshalJSON())
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"role_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RoleName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuditLogOption) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAa864532EncodeGithubComAndersfyllingDisgord28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AuditLogOption) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAa864532EncodeGithubComAndersfyllingDisgord28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuditLogOption) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAa864532DecodeGithubComAndersfyllingDisgord28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AuditLogOption) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAa864532DecodeGithubComAndersfyllingDisgord28(l, v)
}
func easyjsonAa864532DecodeGithubComAndersfyllingDisgord29(in *jlexer.Lexer, out *AuditLogEntry) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "target_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.TargetID).UnmarshalJSON(data))
			}
		case "changes":
			if in.IsNull() {
				in.Skip()
				out.Changes = nil
			} else {
				in.Delim('[')
				if out.Changes == nil {
					if !in.IsDelim(']') {
						out.Changes = make([]*AuditLogChanges, 0, 8)
					} else {
						out.Changes = []*AuditLogChanges{}
					}
				} else {
					out.Changes = (out.Changes)[:0]
				}
				for !in.IsDelim(']') {
					var v58 *AuditLogChanges
					if in.IsNull() {
						in.Skip()
						v58 = nil
					} else {
						if v58 == nil {
							v58 = new(AuditLogChanges)
						}
						(*v58).UnmarshalEasyJSON(in)
					}
					out.Changes = append(out.Changes, v58)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "user_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UserID).UnmarshalJSON(data))
			}
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "action_type":
			out.Event = AuditLogEvt(in.Uint())
		case "options":
			if in.IsNull() {
				in.Skip()
				out.Options = nil
			} else {
				if out.Options == nil {
					out.Options = new(AuditLogOption)
				}
				(*out.Options).UnmarshalEasyJSON(in)
			}
		case "reason":
			out.Reason = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa864532EncodeGithubComAndersfyllingDisgord29(out *jwriter.Writer, in AuditLogEntry) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"target_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.TargetID).MarshalJSON())
	}
	if len(in.Changes) != 0 {
		const prefix string = ",\"changes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v59, v60 := range in.Changes {
				if v59 > 0 {
					out.RawByte(',')
				}
				if v60 == nil {
					out.RawString("null")
				} else {
					(*v60).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.UserID).MarshalJSON())
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ID).MarshalJSON())
	}
	{
		const prefix string = ",\"action_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.Event))
	}
	if in.Options != nil {
		const prefix string = ",\"options\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Options).MarshalEasyJSON(out)
	}
	if in.Reason != "" {
		const prefix string = ",\"reason\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Reason))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuditLogEntry) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAa864532EncodeGithubComAndersfyllingDisgord29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AuditLogEntry) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAa864532EncodeGithubComAndersfyllingDisgord29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuditLogEntry) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAa864532DecodeGithubComAndersfyllingDisgord29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AuditLogEntry) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAa864532DecodeGithubComAndersfyllingDisgord29(l, v)
}
func easyjsonAa864532DecodeGithubComAndersfyllingDisgord30(in *jlexer.Lexer, out *AuditLogChanges) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "new_value":
			if m, ok := out.NewValue.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.NewValue.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.NewValue = in.Interface()
			}
		case "old_value":
			if m, ok := out.OldValue.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.OldValue.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.OldValue = in.Interface()
			}
		case "key":
			out.Key = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa864532EncodeGithubComAndersfyllingDisgord30(out *jwriter.Writer, in AuditLogChanges) {
	out.RawByte('{')
	first := true
	_ = first
	if in.NewValue != nil {
		const prefix string = ",\"new_value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.NewValue.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.NewValue.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.NewValue))
		}
	}
	if in.OldValue != nil {
		const prefix string = ",\"old_value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.OldValue.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.OldValue.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.OldValue))
		}
	}
	{
		const prefix string = ",\"key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Key))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuditLogChanges) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAa864532EncodeGithubComAndersfyllingDisgord30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AuditLogChanges) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAa864532EncodeGithubComAndersfyllingDisgord30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuditLogChanges) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAa864532DecodeGithubComAndersfyllingDisgord30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AuditLogChanges) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAa864532DecodeGithubComAndersfyllingDisgord30(l, v)
}
func easyjsonAa864532DecodeGithubComAndersfyllingDisgord31(in *jlexer.Lexer, out *AuditLog) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "webhooks":
			if in.IsNull() {
				in.Skip()
				out.Webhooks = nil
			} else {
				in.Delim('[')
				if out.Webhooks == nil {
					if !in.IsDelim(']') {
						out.Webhooks = make([]*Webhook, 0, 8)
					} else {
						out.Webhooks = []*Webhook{}
					}
				} else {
					out.Webhooks = (out.Webhooks)[:0]
				}
				for !in.IsDelim(']') {
					var v61 *Webhook
					if in.IsNull() {
						in.Skip()
						v61 = nil
					} else {
						if v61 == nil {
							v61 = new(Webhook)
						}
						easyjsonAa864532DecodeGithubComAndersfyllingDisgord32(in, v61)
					}
					out.Webhooks = append(out.Webhooks, v61)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "users":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make([]*User, 0, 8)
					} else {
						out.Users = []*User{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v62 *User
					if in.IsNull() {
						in.Skip()
						v62 = nil
					} else {
						if v62 == nil {
							v62 = new(User)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v62).UnmarshalJSON(data))
						}
					}
					out.Users = append(out.Users, v62)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "audit_log_entries":
			if in.IsNull() {
				in.Skip()
				out.AuditLogEntries = nil
			} else {
				in.Delim('[')
				if out.AuditLogEntries == nil {
					if !in.IsDelim(']') {
						out.AuditLogEntries = make([]*AuditLogEntry, 0, 8)
					} else {
						out.AuditLogEntries = []*AuditLogEntry{}
					}
				} else {
					out.AuditLogEntries = (out.AuditLogEntries)[:0]
				}
				for !in.IsDelim(']') {
					var v63 *AuditLogEntry
					if in.IsNull() {
						in.Skip()
						v63 = nil
					} else {
						if v63 == nil {
							v63 = new(AuditLogEntry)
						}
						(*v63).UnmarshalEasyJSON(in)
					}
					out.AuditLogEntries = append(out.AuditLogEntries, v63)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa864532EncodeGithubComAndersfyllingDisgord31(out *jwriter.Writer, in AuditLog) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"webhooks\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Webhooks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v64, v65 := range in.Webhooks {
				if v64 > 0 {
					out.RawByte(',')
				}
				if v65 == nil {
					out.RawString("null")
				} else {
					easyjsonAa864532EncodeGithubComAndersfyllingDisgord32(out, *v65)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"users\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Users == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v66, v67 := range in.Users {
				if v66 > 0 {
					out.RawByte(',')
				}
				if v67 == nil {
					out.RawString("null")
				} else {
					easyjsonAa864532EncodeGithubComAndersfyllingDisgord2(out, *v67)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"audit_log_entries\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.AuditLogEntries == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v68, v69 := range in.AuditLogEntries {
				if v68 > 0 {
					out.RawByte(',')
				}
				if v69 == nil {
					out.RawString("null")
				} else {
					(*v69).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuditLog) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAa864532EncodeGithubComAndersfyllingDisgord31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AuditLog) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAa864532EncodeGithubComAndersfyllingDisgord31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuditLog) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAa864532DecodeGithubComAndersfyllingDisgord31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AuditLog) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAa864532DecodeGithubComAndersfyllingDisgord31(l, v)
}
func easyjsonAa864532DecodeGithubComAndersfyllingDisgord32(in *jlexer.Lexer, out *Webhook) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "guild_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.GuildID).UnmarshalJSON(data))
			}
		case "channel_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ChannelID).UnmarshalJSON(data))
			}
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.User).UnmarshalJSON(data))
				}
			}
		case "name":
			out.Name = string(in.String())
		case "avatar":
			out.Avatar = string(in.String())
		case "token":
			out.Token = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa864532EncodeGithubComAndersfyllingDisgord32(out *jwriter.Writer, in Webhook) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ID).MarshalJSON())
	}
	if in.GuildID != 0 {
		const prefix string = ",\"guild_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.GuildID).MarshalJSON())
	}
	{
		const prefix string = ",\"channel_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ChannelID).MarshalJSON())
	}
	if in.User != nil {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonAa864532EncodeGithubComAndersfyllingDisgord2(out, *in.User)
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"avatar\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Avatar))
	}
	{
		const prefix string = ",\"token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Token))
	}
	out.RawByte('}')
}
